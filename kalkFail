#include <iostream>
#include <stdint.h>//uint32_t
#include <complex>

using namespace std;

#define M_PI 3.141592653589793

void WczytajArgumenty(int liczbaArgumentow, double *wskaznikDoTablicy) {

	for (int i = 0; i < liczbaArgumentow; i++) {
		scanf_s("%lf", &wskaznikDoTablicy[i]);
	}
}

void WczytajArgumenty(int liczbaArgumentow, int *wskaznikDoTablicy) {

	for (int i = 0; i < liczbaArgumentow; i++) {
		scanf_s("%i", &wskaznikDoTablicy[i]);
	}
}

void WczytajArgumenty(int liczbaArgumentow, unsigned long long int *wskaznikDoTablicy) {

	for (int i = 0; i < liczbaArgumentow; i++) {
		scanf_s("%llu", &wskaznikDoTablicy[i]);
	}
}

void WczytajArgumenty(int liczbaArgumentow, uint32_t *wskaznikDoTablicy) {

	for (int i = 0; i < liczbaArgumentow; i++) {
		scanf_s("%u", &wskaznikDoTablicy[i]);
	}
}
void WczytajArgumenty(int liczbaArgumentow, short *wskaznikDoTablicy) {

	for (int i = 0; i < liczbaArgumentow; i++) {
		scanf_s("%hu", &wskaznikDoTablicy[i]);
	}
}

void ZamienMiejscami(double &argument1, double &argument2) {
	double *x = &argument1;
	double *y = &argument2;

	if (*x != *y) { // zamiana bez u|ycia 3-ciej zmiennej
		*x += *y;
		*y = *x - *y;
		*x -= *y;
	}
}

void ZamienMiejscami(int &argument1, int &argument2) {
	int *x = &argument1;
	int *y = &argument2;

	if (*x != *y) { // zamiana bez u|ycia 3-ciej zmiennej
		*x += *y;
		*y = *x - *y;
		*x -= *y;
	}
}

double Podloga(double y) {
	double x = ((__int64)(y * 1.0e+10)) / (1.0e+10);//zeruje wszystkie liczby po 10 miejscu po przecinku

	if (x >= 0) {
		return (int)x;
	}
	else {
		if ((int)x != x) {
			return (int)(x - 1);
		}
		else return x;
	}
}

double CubicRoot(double x) {
	if (x == 0) {
		return x;
	}
	else if (x > 0) {
		x = pow(x, 1.0 / 3.0);
		return x;
	}
	else {
		x = -pow(-x, 1.0 / 3.0);
		return x;
	}
}

double Abs(double x) {
	return (x < 0 ? -x : x);
}

double Abs(int x) {
	return (x < 0 ? -x : x);
}

//znajdz pozycje najmniejszej liczby
int f0(int liczbaArgumentow, int *wskaznikDoTablicy) {

	double najmniejszaWartosc = 2147483647; //warto[ maksymalna dla int'a

	if (wskaznikDoTablicy == NULL) {
		int *tablicaArgumentow = (int *)malloc(liczbaArgumentow * sizeof(int));
		WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);

		int pozycja = 0;

		for (int i = 0; i < liczbaArgumentow; i++)
		{
			if (tablicaArgumentow[i] < najmniejszaWartosc) {
				najmniejszaWartosc = tablicaArgumentow[i];
				pozycja = i;
			}
		}
		//teraz znajdz mo|liwe wystpienia kilku najmniejszych takich samych liczb
		for (int i = 0; i < liczbaArgumentow; i++)
		{
			if (tablicaArgumentow[i] == tablicaArgumentow[pozycja])
				printf("%i ", i + 1); //+ 1, bo tablica zaczyna sie od 0
		}
		printf("\n");
		free(tablicaArgumentow);

		return pozycja;
	}
	else {//je[li funkcja jaka[ podaBa ju| istniejc tablic

		int pozycja = 0;

		for (int i = 0; i < liczbaArgumentow; i++)
		{
			if (wskaznikDoTablicy[i] < najmniejszaWartosc) {
				najmniejszaWartosc = wskaznikDoTablicy[i];
				pozycja = i;
			}
		}
		return pozycja;
	}
}

//posortuj tablice malejco
void f1(int liczbaArgumentow) {

	int *tablicaArgumentow = (int *)malloc(liczbaArgumentow * sizeof(int));
	WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);

	int pozycja = 0;

	for (int i = 0; i < liczbaArgumentow; i++)
	{
		pozycja = f0(liczbaArgumentow - i, tablicaArgumentow);//podaj do f0 n - i,a na koncowkach 'tablicaArgumentow' dodawaj najmniejsze liczby

		ZamienMiejscami(tablicaArgumentow[liczbaArgumentow - i - 1], tablicaArgumentow[pozycja]);
	}

	for (int i = 0; i < liczbaArgumentow; i++)
	{
		printf("%i ", tablicaArgumentow[i]);
	}
	printf("\n");

	free(tablicaArgumentow);
}

//znajdz dBugo[ wektora
double f2(int liczbaArgumentow, double *wskaznikDoTablicy) {

	if (wskaznikDoTablicy == NULL) {
		int *tablicaArgumentow = (int *)malloc(liczbaArgumentow * sizeof(int));
		WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);
		
		double suma = 0;

		for (int i = 0; i < liczbaArgumentow; i++)
		{
			suma += tablicaArgumentow[i] * tablicaArgumentow[i];
		}

		free(tablicaArgumentow);

		printf("%i \n", (int)Podloga(sqrt(suma)));
		return 0;
	}

	else {//je[li funkcja jaka[ podaBa ju| istniejc tablic
		double suma = 0;
		for (int i = 0; i < liczbaArgumentow; i++)
		{
			suma += wskaznikDoTablicy[i] * wskaznikDoTablicy[i];
		}

		return suma;
	}
}

//znajdz odchylenie standardowe
void f3(int liczbaArgumentow) {

	double *tablicaArgumentow = (double *)malloc(liczbaArgumentow * sizeof(double));
	WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);

	double sredniaLiczb = 0;
	for (int i = 0; i < liczbaArgumentow; i++)
	{
		sredniaLiczb += tablicaArgumentow[i];
	}
	sredniaLiczb /= liczbaArgumentow;

	for (int i = 0; i < liczbaArgumentow; i++)
	{
		tablicaArgumentow[i] -= sredniaLiczb;
	}
	double odchylenie = sqrt(f2(liczbaArgumentow, tablicaArgumentow) / liczbaArgumentow);

	printf("%i \n", (int)Podloga(odchylenie));

	free(tablicaArgumentow);
}

//odwr� tablice w miejscu
void f4(int liczbaArgumentow) {

	int *tablicaArgumentow = (int *)malloc(liczbaArgumentow * sizeof(int));
	WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);

	for (int i = 0; i < liczbaArgumentow / 2; i++)
	{
		ZamienMiejscami(tablicaArgumentow[liczbaArgumentow - i - 1], tablicaArgumentow[i]);
	}
	for (int i = 0; i < liczbaArgumentow; i++)
	{
		printf("%i ", tablicaArgumentow[i]);
	}
	printf("\n");

	free(tablicaArgumentow);
}

//sprawdz czy liczby sa pierwsze
void f5(int liczbaArgumentow) {
	
	uint32_t *tablicaArgumentow = (uint32_t *)malloc(liczbaArgumentow * sizeof(uint32_t));
	WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);

	bool czyLiczbaJestPierwsza;
	int i = 0;
	uint32_t j;

	for (i; i < liczbaArgumentow; i++)
	{
		czyLiczbaJestPierwsza = true;

		if (tablicaArgumentow[i] != 2 && tablicaArgumentow[i] % 2 == 0) {
			czyLiczbaJestPierwsza = false;
		}
		else {
			j = 3;
			for (j; j*j <= tablicaArgumentow[i]; j += 2)
			{
				if ((tablicaArgumentow[i] % j) == 0) {
					czyLiczbaJestPierwsza = false;
					break;
				}
			}
		}
		tablicaArgumentow[i] = (uint32_t)czyLiczbaJestPierwsza;
		printf("%u ", tablicaArgumentow[i]);
	}

	printf("\n");
	free(tablicaArgumentow);
}

void PosortujPunktyZadanie6(int liczbaArgumentow, double *tablicaArgumentow, double srodekX, double srodekY) {

	double *tablicaKatow = (double *)malloc(liczbaArgumentow * sizeof(double));

	//oblicz tangensa dla kazdego punktu xy
	for (int i = 0; i < liczbaArgumentow - 1; i += 2)//liczymy clockwise > v < ^
	{
		double deltaX = tablicaArgumentow[i] - srodekX;
		double deltaY = tablicaArgumentow[i + 1] - srodekY;

		tablicaKatow[i / 2] = (atan2(deltaY, deltaX) * 180 / M_PI); // tangens, konwersja na stopnie, tablica ta posiada polowe wielkosci 'tablicaArgumentow'
	}

	//posortowa teraz wg kt�w malejco

	for (int i = 0; i < liczbaArgumentow; i += 2)
	{
		double najmniejszaWartosc = 2147483647; //warto[ maksymalna dla int'a
		int pozycja = 0;

		for (int j = 0; j < (liczbaArgumentow - i) / 2; j++) // i/2 bo tablicaKatow jest 2 razy mniejsza
		{
			if (tablicaKatow[j] < najmniejszaWartosc) {
				najmniejszaWartosc = tablicaKatow[j];
				pozycja = j;
			}
		}

		ZamienMiejscami(tablicaKatow[((liczbaArgumentow - i) / 2) - 1], tablicaKatow[pozycja]);//kty

		ZamienMiejscami(tablicaArgumentow[liczbaArgumentow - 2 - i], tablicaArgumentow[pozycja * 2]);//wartosci x punkt�w
		ZamienMiejscami(tablicaArgumentow[liczbaArgumentow - 1 - i], tablicaArgumentow[pozycja * 2 + 1]);//wartosci y punkt�w
	}

	free(tablicaKatow);
}

struct punkt {
	double x;
	double y;
} Punkt;

//pole wielokta wypukBego
void f6(int liczbaArgumentow) {

	double *tablicaArgumentow = (double *)malloc(liczbaArgumentow * sizeof(double));
	WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);

	//oblicz punkt le|cy wewnatrz wielokta
	double srodekX = 0, srodekY = 0;
	for (int i = 0; i < liczbaArgumentow; i++)
	{
		if (i % 2 == 0) {
			srodekX += tablicaArgumentow[i];
		}
		else {
			srodekY += tablicaArgumentow[i];
		}
	}

	srodekX = srodekX / (liczbaArgumentow / 2);
	srodekY = srodekY / (liczbaArgumentow / 2);

	PosortujPunktyZadanie6(liczbaArgumentow, tablicaArgumentow, srodekX, srodekY);

	//policz pole tego wielokata
	double suma = 0;

	for (int i = 0; i < liczbaArgumentow - 3; i += 2)
	{
		suma += (tablicaArgumentow[i] * tablicaArgumentow[i + 3] - tablicaArgumentow[i + 1] * tablicaArgumentow[i + 2]);
	}

	suma += (tablicaArgumentow[liczbaArgumentow - 2] * tablicaArgumentow[1] - tablicaArgumentow[liczbaArgumentow - 1] * tablicaArgumentow[0]); //ostatni element sumy
	printf("%i \n", (int)Podloga(abs(suma / 2)));

	free(tablicaArgumentow);
}

//r�wnanie kwadratowe i sze[cienne
void f7(int liczbaArgumentow) {
	
	double *tablicaArgumentow = (double *)malloc(liczbaArgumentow * sizeof(double));
	WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);

	//r�wnanie kwadratowe
	if (tablicaArgumentow[0] == 0) {
		double a = tablicaArgumentow[1];
		double b = tablicaArgumentow[2];
		double c = tablicaArgumentow[3];

		double delta = b * b - 4 * a*c;

		if (delta == 0 && a != 0) {
			double x = (-b) / (2 * a);

			printf("%i \n", (int)Podloga(x));
		}
		else if (delta > 0) {
			double x1 = (-b - sqrt(delta)) / (2 * a);
			double x2 = (-b + sqrt(delta)) / (2 * a);

			if (x1 < x2) {//mniejszy pierwiastek wyswietl pierwszy
				cout << Podloga(x1) << " " << Podloga(x2) << endl;
			}
			else {
				cout << Podloga(x2) << " " << Podloga(x1) << endl;
			}
		}
		else
		{
			cout << endl;
		}
	}
	else {
		//r�wnanie sze[cienne
		double a = tablicaArgumentow[0];
		double b = tablicaArgumentow[1];
		double c = tablicaArgumentow[2];
		double d = tablicaArgumentow[3];

		double f = (((3 * c) / a) - (b*b) / (a*a)) / 3;
		double g = ((2 * b*b*b) / (a*a*a) - (9 * b*c) / (a*a) + (27 * d) / a) / 27;
		double h = (g*g) / 4 + (f*f*f) / 27;

		if (h > 0) {//jeden pierwiastek realny
			double R = sqrt(h) - g / 2;
			double S = CubicRoot(R);
			double T = -sqrt(h) - g / 2;
			double U = CubicRoot(T);

			double pierwiastek = (S + U) - b / (3 * a);


			double delta0 = b * b - 3 * a*c;
			double delta1 = 2 * b*b*b - 9 * a*b*c + 27 * a*a*d;
			double C = CubicRoot((delta1 + sqrt(delta1*delta1 - 4 * delta0*delta0*delta0)) / 2);

			const complex<double> i(0.0, 1.0);

			complex<double> pierwiastek2 = -1 / (3 * a)*(b + (-1.0 / 2.0 + 1.0 / 2.0 * sqrt(3.0) * i) * C + delta0 / ((-1 / 2.0 + 1 / 2.0*sqrt(3.0) * i)*C));
			complex<double> pierwiastek3 = -1 / (3 * a)*(b + (-1.0 / 2.0 - 1.0 / 2.0 * sqrt(3.0) * i) * C + delta0 / ((-1 / 2.0 - 1 / 2.0*sqrt(3.0) * i)*C));

			printf("%i ", (int)Podloga(pierwiastek));

			if (Podloga(pierwiastek2.imag()) == 1) {
				cout << "i ";
			}
			else if (Podloga(pierwiastek2.imag()) == -1) {
				cout << "-i ";
			}
			else {
				if (Podloga(pierwiastek2.imag()) != 0) {
					cout << Podloga(pierwiastek2.imag()) << "i ";
				}
			}

			if (Podloga(pierwiastek3.imag()) == 1) {
				cout << "i ";
			}
			else if (Podloga(pierwiastek3.imag()) == -1) {
				cout << "-i ";
			}
			else {
				if (Podloga(pierwiastek3.imag()) != 0) {
					cout << Podloga(pierwiastek3.imag()) << "i ";
				}
			}
			cout << endl;
		}

		else if (h == 0 && g == 0 && f == 0) {//1 pierwiastek potr�jny
			double pierwiastek = -CubicRoot(d / a);
			printf("%i \n", (int)Podloga(pierwiastek));
		}
		else {//3 r�|ne pierwiastki
			double i = sqrt((g*g) / 4 - h);
			double j = CubicRoot(i);
			double k = acos(-(g / (2 * i)));
			double L = -j;
			double M = cos(k / 3);
			double N = sqrt(3.0)*sin(k / 3);
			double P = -(b / (3 * a));

			double p1 = 2 * j*cos(k / 3) - (b / (3 * a));
			double p2 = L * (M + N) + P;
			double p3 = L * (M - N) + P;

			//sortuj
			if (p3 < p1) { ZamienMiejscami(p3, p1); }
			if (p2 < p1) { ZamienMiejscami(p2, p1); }

			//usuD duplikaty
			if (Podloga(p1) == Podloga(p2) && Podloga(p1) == Podloga(p3)) {
				cout << Podloga(p1) << endl;
			}
			else if (Podloga(p1) == Podloga(p2) || Podloga(p1) == Podloga(p3)) {
				cout << Podloga(p2) << " " << Podloga(p3) << endl;
			}
			else if (Podloga(p2) == Podloga(p1) || Podloga(p2) == Podloga(p3)) {
				cout << Podloga(p1) << " " << Podloga(p3) << endl;
			}
			else {
				cout << Podloga(p1) << " " << Podloga(p2) << " " << Podloga(p3) << endl;
			}
		}
	}
	free(tablicaArgumentow);
}

//oblicz wyra|enie dla zadanego n
void f8(int liczbaArgumentow) {
	int *tablicaArgumentow = (int *)malloc(liczbaArgumentow * sizeof(int));
	WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);

	for (int i = 0; i < liczbaArgumentow; i++)
	{
		unsigned long long int wynik = 0;
		for (int j = 1; j <= tablicaArgumentow[i]; j++)
		{
			wynik += (j*j*j + 2 * j*j + j);
		}
		printf("%llu ", wynik);
	}

	printf("\n");
	free(tablicaArgumentow);
}

// zlicz liczb bit�w
void f9(int liczbaArgumentow) {
	unsigned long long int *tablicaArgumentow = (unsigned long long int *)malloc(liczbaArgumentow * sizeof(unsigned long long int));
	WczytajArgumenty(liczbaArgumentow, tablicaArgumentow);

	for (int i = 0; i < liczbaArgumentow; i++)//Brian Kernighan
	{
		short licznikBitow = 0;
		while (tablicaArgumentow[i]) {
			tablicaArgumentow[i] &= (tablicaArgumentow[i] - 1);
			licznikBitow++;
		}
		printf("%d ", licznikBitow);
	}

	printf("\n");
	free(tablicaArgumentow);
}

int main() {
	int subprogram, n;
	while (cin >> subprogram >> n) {
		switch (subprogram) 
		{
		case 0:
			f0(n, NULL);
			break;
		case 1:
			f1(n);
			break;
		case 2:
			f2(n, NULL);
			break;
		case 3:
			f3(n);
			break;
		case 4:
			f4(n);
			break;
		case 5:
			f5(n);
			break;
		case 6:
			f6(n);
			break;
		case 7:
			f7(n);
			break;
		case 8:
			f8(n);
			break;
		case 9:
			f9(n);
			break;
		}
	};
	return 0;
}
